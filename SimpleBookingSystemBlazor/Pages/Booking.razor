@page "/Booking/{Id:int}"


@using SimpleBookingSystemBlazor.Data
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject IBookingData _bookingData
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStore
<h3>Booking @Id</h3>


<EditForm Model="@_booking" OnValidSubmit="@book">
    <DataAnnotationsValidator/> <ValidationSummary/>

    <div class="form-group">

       

        <RadzenCard>
            <h4 class="mb-2">Datefrom</h4>
            <RadzenDatePicker @bind-Value="_booking.DateFrom" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" Change=@(args => OnChange(args, "DatePicker with time", "MM/dd/yyyy HH:mm")) DateFormat="MM/dd/yyyy HH:mm" Class="w-100"/>
        </RadzenCard>


    </div>

    <div class="form-group">
        <RadzenCard>
                    <h4 class="mb-2">DateTo</h4>
                    <RadzenDatePicker @bind-Value="_booking.DateTo" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" Change=@(args => OnChange(args, "DatePicker with time", "MM/dd/yyyy HH:mm")) DateFormat="MM/dd/yyyy HH:mm" Class="w-100"/>
                </RadzenCard>
        
    </div>

    <div class="form-group"> Quantity:<br/> <InputNumber min="1" @bind-Value="_booking.BookedQuantity"/> </div>


    <p class="actions">
        <button class="btn btn-outline-dark" type="submit" @onclick="book">Book</button>
    </p>


</EditForm>


<div style="color:red">@errorMessage</div>


@code {

    [Parameter]
    public int Id { get; set; }

    private string errorMessage;

    private Model.Booking _booking = new Model.Booking();

    protected override async Task OnInitializedAsync()
    {
        errorMessage = "";
    }


    private async Task book()
    {
        try
        {
            if (Datevalidation())
            {
                await _bookingData.Book(_booking, Id);
                await ProtectedSessionStore.SetAsync("id", Id);
                NavigationManager.NavigateTo("/Success");
            }
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }

    public bool Datevalidation()
    {
        if (_booking.DateFrom > _booking.DateTo)
        {
            errorMessage = "Your bookingStartDate can not me later than bookingEndDate";
            return false;
        }

        return true;
    }
    
    void OnChange(DateTime? value, string name, string format)
    {
        Console.WriteLine($"{name} value changed to {value?.ToString(format)}");
    }

}